 if request.method == "POST":
        enquiry = Enquiry()
        phone = request.POST.get('phone')
        message = request.POST.get('message') if request.method == "POST":
        enquiry = Enquiry()
        phone = request.POST.get('phone')
        message = request.POST.get('message')

        enquiry.phone = phone
        enquiry.message = message 
        enquiry.save()
        messages.success(request, f"Your enquiry is registered")
        return redirect('home')
        

        enquiry.phone = phone
        enquiry.message = message 
        enquiry.save()
        messages.success(request, f"Your enquiry is registered")
        return redirect('home')



         class Meta:
        model = Profile
        fields = '__all__'
        exclude = {'user'}
        widgets = {
            'profile_img': FileInput(),

            'name': TextInput(attrs={
                'class': "form-control",
                'style': 'max-width: 500px;',
                'placeholder': 'Name'
                }),

            'email': EmailInput(attrs={
                'class': "form-control",
                'style': 'max-width: 500px;',
                'placeholder': 'email'
                }),    

             'phone': TextInput(attrs={
                'class': "form-control",
                'style': 'max-width: 500px;',
                'placeholder': 'phone number'
                }),

             'course': TextInput(attrs={
                'class': "form-control",
                'style': 'max-width: 500px;',
                
                }),       
        }





        # if password == password2:
        #     if User.objects.filter(username = username).exists():
        #         messages.error(request, f"The user already exist")
        #     elif User.objects.filter(email = email).exists():
        #         messages.error(request, f"The email already exist")
        #     else:
        #         data = User.objects.create_user(username = username, email = email, password = password)  
        #         data.save()
                
               
        #         return redirect('login')    
        # else:
        #     messages.error(request, f"The passwords doesnt match.")
        #     return redirect('register')


        Minimum password length of 8 characters.
At least one uppercase letter.
At least one lowercase letter.
At least one digit.
At least one special character from the provided set !@#$%^&*()







<h2 class="text-uppercase text-center mb-3">Student Registration form</h2>

              <form method="POST">
                {% csrf_token%}

                {% if messages %}
                {% for message in messages%}
                {% if message.tags == "error" %}
                <div class="alert alert-danger" role="alert">
                  {{message}}
                </div>
                {% else %}
                <div class="alert alert-success" role="alert">
                  {{message}}
                </div>
                {% endif%}
                {% endfor%}
                {% endif%}


                <div class="form-outline mb-2">
                  <input type="text" id="form3Example1cg" name="username" class="form-control form-control-lg" />
                  <label class="form-label" for="form3Example1cg">Your Username</label>
                  <label class="form-label" for="form3Example3cg">-> Remember your username it will be use in
                    login.</label>
                </div>

                <div class="form-outline mb-2">
                  <input type="email" id="form3Example3cg" name="email" class="form-control form-control-lg" />
                  <label class="form-label" for="form3Example3cg">Your Email</label><br>
                </div>

                <div class="form-outline mb-2">
                  <!-- <input type="password" id="form3Example4cg" name="password" class="form-control form-control-lg" /> -->

                  <input type="password" class="form-control form-control-lg" name="password" data-toggle="popover" data-content="" data-placement="right"
                    title="*Conditions for password*
1. At least one uppercase letter.
2. At least one lowercase letter.
3. At least one digit.
4. At least one special character from the provided set !@#$%^&*()
5. Minimum password length of 8 characters.
                          " data-trigger="hover" />
                    <label class="form-label" for="form3Example4cg">Password</label><br>
                    <label>-> Hover on password input to know condition for password. </label>
                </div>

                <div class="form-outline mb-2">
                  <input type="password" id="form3Example4cdg" name="password2" class="form-control form-control-lg" />
                  <label class="form-label" for="form3Example4cdg">Repeat your password</label>
                </div>

                <div class="d-flex justify-content-center">
                  <button type="submit"
                    class="btn btn-primary btn-block btn-lg text-white fw-bold">Register</button>
                </div>

                <p class="text-center text-muted mt-5 mb-0">Have already an account? <a href="{% url 'login' %}"
                    class="fw-bold text-body">Login here</a></p>

              </form>





              <div ><img src="" alt="logo"></div>
          <div class="w-100" style="height: 80px;">
          <h3 class="text-primary" style="margin-left: 204px;">Universal</h3>
          <p class="text-center text-primary ">College of arts Science and Commerce</p>
        </div>




        date sort methods and functions 

        <!DOCTYPE html>
<html>
<head>
    <title>Sorting Table</title>
</head>
<body>
    <h1>Sorting Table</h1>
    
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" value="2023-01-01">
    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" value="2023-12-31">
    <button id="sortDateButton">Sort by Date Range (Descending)</button>
    <button id="sortScoreButton">Sort by Score (Descending)</button>

    <table id="myTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Score</th>
                <th>Date of Joining</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>1</td>
                <td>John</td>
                <td>85</td>
                <td>2023-03-15</td>
            </tr>
            <tr>
                <td>2</td>
                <td>Alice</td>
                <td>92</td>
                <td>2023-02-10</td>
            </tr>
            <tr>
                <td>3</td>
                <td>Bob</td>
                <td>78</td>
                <td>2023-04-20</td>
            </tr>
            <tr>
                <td>4</td>
                <td>Eve</td>
                <td>95</td>
                <td>2023-01-05</td>
            </tr>
        </tbody>
    </table>

    <script>
        // Get the buttons and the table
        const sortDateButton = document.getElementById("sortDateButton");
        const sortScoreButton = document.getElementById("sortScoreButton");
        const table = document.getElementById("myTable");
        const startDateInput = document.getElementById("startDate");
        const endDateInput = document.getElementById("endDate");

        // Function to sort the table by date in descending order
        function sortTableByDate() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Get the table rows except for the header row
            const rows = Array.from(table.querySelectorAll("tbody tr"));
            
            // Filter the rows within the specified date range
            const filteredRows = rows.filter(row => {
                const date = new Date(row.cells[3].textContent);
                return date >= startDate && date <= endDate;
            });
            
            // Sort the filtered rows in descending order based on the Date of Joining
            filteredRows.sort((a, b) => {
                const dateA = new Date(a.cells[3].textContent);
                const dateB = new Date(b.cells[3].textContent);
                return dateB - dateA;
            });

            // Remove the current rows from the table
            rows.forEach(row => table.querySelector("tbody").removeChild(row));

            // Append the sorted filtered rows back to the table
            filteredRows.forEach(row => table.querySelector("tbody").appendChild(row));
        }

        // Function to sort the table by score in descending order
        function sortTableByScore() {
            // Get the table rows except for the header row
            const rows = Array.from(table.querySelectorAll("tbody tr"));
            
            // Sort the rows in descending order based on the Score (assuming the score is in the third column)
            rows.sort((a, b) => {
                const scoreA = parseInt(a.cells[2].textContent);
                const scoreB = parseInt(b.cells[2].textContent);
                return scoreB - scoreA;
            });

            // Remove the current rows from the table
            rows.forEach(row => table.querySelector("tbody").removeChild(row));

            // Append the sorted rows back to the table
            rows.forEach(row => table.querySelector("tbody").appendChild(row));
        }

        sortDateButton.addEventListener("click", sortTableByDate);
        sortScoreButton.addEventListener("click", sortTableByScore);
    </script>
</body>
</html>
